// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pedrocmart/maze-go/api/models"
)

// GetLevelOKCode is the HTTP code returned for type GetLevelOK
const GetLevelOKCode int = 200

/*GetLevelOK 200

swagger:response getLevelOK
*/
type GetLevelOK struct {

	/*
	  In: Body
	*/
	Payload models.LevelAllResponse `json:"body,omitempty"`
}

// NewGetLevelOK creates GetLevelOK with default headers values
func NewGetLevelOK() *GetLevelOK {

	return &GetLevelOK{}
}

// WithPayload adds the payload to the get level o k response
func (o *GetLevelOK) WithPayload(payload models.LevelAllResponse) *GetLevelOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get level o k response
func (o *GetLevelOK) SetPayload(payload models.LevelAllResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLevelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.LevelAllResponse{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLevelBadRequestCode is the HTTP code returned for type GetLevelBadRequest
const GetLevelBadRequestCode int = 400

/*GetLevelBadRequest 400

swagger:response getLevelBadRequest
*/
type GetLevelBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewGetLevelBadRequest creates GetLevelBadRequest with default headers values
func NewGetLevelBadRequest() *GetLevelBadRequest {

	return &GetLevelBadRequest{}
}

// WithPayload adds the payload to the get level bad request response
func (o *GetLevelBadRequest) WithPayload(payload *models.BaseResponse) *GetLevelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get level bad request response
func (o *GetLevelBadRequest) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLevelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLevelNotFoundCode is the HTTP code returned for type GetLevelNotFound
const GetLevelNotFoundCode int = 404

/*GetLevelNotFound 404

swagger:response getLevelNotFound
*/
type GetLevelNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewGetLevelNotFound creates GetLevelNotFound with default headers values
func NewGetLevelNotFound() *GetLevelNotFound {

	return &GetLevelNotFound{}
}

// WithPayload adds the payload to the get level not found response
func (o *GetLevelNotFound) WithPayload(payload *models.BaseResponse) *GetLevelNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get level not found response
func (o *GetLevelNotFound) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLevelNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLevelInternalServerErrorCode is the HTTP code returned for type GetLevelInternalServerError
const GetLevelInternalServerErrorCode int = 500

/*GetLevelInternalServerError 500

swagger:response getLevelInternalServerError
*/
type GetLevelInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.BaseResponse `json:"body,omitempty"`
}

// NewGetLevelInternalServerError creates GetLevelInternalServerError with default headers values
func NewGetLevelInternalServerError() *GetLevelInternalServerError {

	return &GetLevelInternalServerError{}
}

// WithPayload adds the payload to the get level internal server error response
func (o *GetLevelInternalServerError) WithPayload(payload *models.BaseResponse) *GetLevelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get level internal server error response
func (o *GetLevelInternalServerError) SetPayload(payload *models.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLevelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
