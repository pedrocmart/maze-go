// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostLevelHandlerFunc turns a function with the right signature into a post level handler
type PostLevelHandlerFunc func(PostLevelParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostLevelHandlerFunc) Handle(params PostLevelParams) middleware.Responder {
	return fn(params)
}

// PostLevelHandler interface for that can handle valid post level params
type PostLevelHandler interface {
	Handle(PostLevelParams) middleware.Responder
}

// NewPostLevel creates a new http.Handler for the post level operation
func NewPostLevel(ctx *middleware.Context, handler PostLevelHandler) *PostLevel {
	return &PostLevel{Context: ctx, Handler: handler}
}

/* PostLevel swagger:route POST /level postLevel

Record level

*/
type PostLevel struct {
	Context *middleware.Context
	Handler PostLevelHandler
}

func (o *PostLevel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostLevelParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
