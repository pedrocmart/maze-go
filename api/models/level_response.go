// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LevelResponse level response
//
// swagger:model LevelResponse
type LevelResponse struct {

	// Player data map
	LevelData struct {
		Level
	} `json:"levelData,omitempty"`

	// message
	// Example: error message
	Message string `json:"message,omitempty"`

	// status
	// Required: true
	Status int64 `json:"status"`

	// Success
	// Example: true
	// Required: true
	Success bool `json:"success"`
}

// Validate validates this level response
func (m *LevelResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevelData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LevelResponse) validateLevelData(formats strfmt.Registry) error {
	if swag.IsZero(m.LevelData) { // not required
		return nil
	}

	return nil
}

func (m *LevelResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", int64(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *LevelResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", bool(m.Success)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this level response based on the context it is used
func (m *LevelResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLevelData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LevelResponse) contextValidateLevelData(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *LevelResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LevelResponse) UnmarshalBinary(b []byte) error {
	var res LevelResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
